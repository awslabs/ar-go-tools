# This is a complete config file. All fields are mostly optional, unless clearly required by the analysis you
# are trying to run.

# loglevel is 3 by default (info) and goes up to 5 (trace)
loglevel: 5

# the reports directory can be set in the config file, otherwise if any report is required it will be generated
# with a name matching *-report in the directory where the program is called
reportsdir: "example-dir"

# [taint] set coverage to true if you want the taint analysis to report coverage for any line where data could be
# tainted. This is a report requirement.
reportcoverage: true

# [taint] set reporting paths to true if you want the taint analysis to write the taint traces that it discovered
# a new file will be created for each trace, with a name containing "path"
reportpaths: true

# set to true to let dataflow analyses report if any call site cannot be resolved, i.e. its callee cannot be found
# this is useful for debugging purposes
reportnocalleesites: true

# [taint] if coveragefilter is specified, only the functions that match the coverage filter will be included in the
# coverage report of the taint tool
coveragefilter: "argot.*"

# set reportsummaries to true if you want any dataflow analysis to report the dataflow summaries. A file *-summaries
# will be created in the reports directory. This is a report requirement.
reportsummaries: true

# [taint] skipinterprocedural can be set to true if you only want to run the intra-procedural analysis when running
# the taint tool in argot. It is only useful for debugging purposes
skipinterprocedural: true

# [taint] this can be set to limit which packages are analyzed during the first phase of the taint analysis.
# packages that do not match the regex will not be analyzed
pkgfilter: "analysis.*"

# For context-sensitive graph reachability based analysis this parameter can be used to limit the callstack depth
# that can be considered during the analysis. This can be used for debugging, or to artifically only filter
# short traces
maxdepth: 42

# this can be set to limit the number of alarms raised by an analysis if you only care about the truth value of
# the output, or only want to analyze a few results
maxalarms: 16

# For any dataflow analysis, you can specify summaries for specific functions and interfaces. The analysis will
# use each of those files as a reference for the functions specified
dataflowspecs:
  - "example.json"
  - "example2.json"


validators:
  - method: "Validate"
    package: "x"

sinks:
  - method: "Sink"
    package: "sensitiveDataManipulation"

sources:
  - type: "Data"
    field: "UserProvided"

sanitizers:
  - method: "Sanitize"