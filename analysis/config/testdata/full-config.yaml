# This is a complete config file. All fields are mostly optional, unless clearly required by the analysis you
# are trying to run.

options:
  # log-level is 3 by default (info) and goes up to 5 (trace)
  log-level: 5

  # the reports directory can be set in the config file, otherwise if any report is required it will be generated
  # with a name matching *-report in the directory where the program is called
  reports-dir: "example-dir"

  # [taint] set coverage to true if you want the taint analysis to report coverage for any line where data could be
  # tainted. This is a report requirement.
  report-coverage: true

  # [taint] set reporting paths to true if you want the taint analysis to write the taint traces that it discovered
  # a new file will be created for each trace, with a name containing "path"
  report-paths: true

  # set to true to let dataflow analyses report if any call site cannot be resolved, i.e. its callee cannot be found
  # this is useful for debugging purposes
  report-no-callee-sites: true

  # [taint] if coverage-filter is specified, only the functions that match the coverage filter will be included in the
  # coverage report of the taint tool
  coverage-filter: "argot.*"

  # set report-summaries to true if you want any dataflow analysis to report the dataflow summaries. A file *-summaries
  # will be created in the reports directory. This is a report requirement.
  report-summaries: true

  # [taint] skip-interprocedural can be set to true if you only want to run the intra-procedural analysis when running
  # the taint tool in argot. It is only useful for debugging purposes
  skip-interprocedural: true

  # [taint] this can be set to limit which packages are analyzed during the first phase of the taint analysis.
  # packages that do not match the regex will not be analyzed
  pkg-filter: "analysis.*"

  # this can be set to limit the number of alarms raised by an analysis if you only care about the truth value of
  # the output, or only want to analyze a few results
  max-alarms: 16

  # this can be used to limit the size of the callstack when searching for contexts under which a function can be
  # called.
  max-entrypoint-context-size: 20

  # this can be set to suppress warnings. Errors (i.e. taint detected will be reported)
  silence-warn: true

  # this can be set so that source function are also tainting their arguments
  source-taints-args: true

  # this option makes analyzes unsound, but can be useful in exploration. This ignores when functions have not
  # been summarized during the inter-procedural step
  unsafe-ignore-non-summarized: true

  # For context-sensitive graph reachability based analysis this parameter can be used to limit the callstack depth
  # that can be considered during the analysis. This can be used for debugging, or to artifically only filter
  # short traces
  unsafe-max-depth: 42

  # this options ensures that the escape analysis is run in parallel with the dataflow analysis
  use-escape-analysis: true

  # this can be set to use only on-demand summarization
  summarize-on-demand: true

  # This setting sets whether the analysis is field sensitive
  field-sensitive: true

# For any dataflow analysis, you can specify summaries for specific functions and interfaces. The analysis will
# use each of those files as a reference for the functions specified
dataflow-specs:
  - "example.json"
  - "example2.json"

# Configuration elements specific to the pointer analysis
pointer-config:
  reflection: true
  unsafe-no-effect-functions:
    - "fmt.Errorf"
    - "fmt.Printf"

taint-tracking-problems:
  - validators:
      - method: "Validate"
        package: "x"

    sinks:
      - method: "Sink"
        package: "sensitiveDataManipulation"

    sources:
      - type: "Data"
        field: "UserProvided"

    sanitizers:
      - method: "Sanitize"